{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","usersPosts","setSelectedPost","selectedPost","setIsCommentButtonClicked","className","map","post","id","title","type","classNames","onClick","selectPostHandler","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setPostsComments","setCommentErrorMessage","useState","isFormLoading","setIsFormLoading","commentName","setCommentName","commentEmail","setCommentEmail","commentText","setCommentText","name","email","text","formError","setFormError","isEmptyField","length","addComment","event","preventDefault","rest","postId","createComment","trim","newComment","currentComments","catch","finally","onSubmit","htmlFor","placeholder","value","onChange","target","PostDetails","isCommentButtonClicked","isCommentsLoading","setIsCommentsLoading","commentErrorMessage","postsComments","useEffect","comentsFromServer","deleteCommentHandler","prew","filter","CurentComment","removeComment","comment","href","UserSelector","users","setIsDropDownActive","isDropDownActive","setSelectedUser","selectedUser","role","user","selectUserHandler","App","setUsers","errorMessage","setErrorMessage","setUsersPosts","isLoading","setIsLoading","usersFromServer","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63a32b52.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  usersPosts: Post[],\n  setSelectedPost: (value: Post | null) => void,\n  selectedPost: Post | null,\n  setIsCommentButtonClicked: (value: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  usersPosts,\n  setSelectedPost,\n  selectedPost,\n  setIsCommentButtonClicked,\n}) => {\n  const selectPostHandler = (post: Post) => {\n    if (selectedPost !== post) {\n      setSelectedPost(post);\n      setIsCommentButtonClicked(false);\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {usersPosts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost !== post,\n                  })}\n                  onClick={() => selectPostHandler(post)}\n                >\n                  {selectedPost !== post\n                    ? 'Open'\n                    : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post | null,\n  setPostsComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setCommentErrorMessage: (value: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setPostsComments,\n  setCommentErrorMessage,\n}) => {\n  const [isFormLoading, setIsFormLoading] = useState(false);\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [formError, setFormError] = useState({\n    name: '',\n    email: '',\n    text: '',\n  });\n\n  const isEmptyField = commentText.length === 0\n    || commentEmail.length === 0\n    || commentName.length === 0;\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentName(event.target.value);\n    setFormError({\n      ...formError,\n      name: '',\n    });\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentEmail(event.target.value);\n    setFormError({\n      ...formError,\n      email: '',\n    });\n  };\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentText(event.target.value);\n    setFormError({\n      ...formError,\n      text: '',\n    });\n  };\n\n  const createComment = ({\n    postId,\n    name,\n    email,\n    body,\n  }: Omit<Comment, 'id'>) => {\n    return client.post<Comment>('/comments', {\n      postId, name, email, body,\n    });\n  };\n\n  const addComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!commentName) {\n      setFormError(rest => ({\n        ...rest,\n        name: 'Name is required',\n      }));\n    }\n\n    if (!commentEmail) {\n      setFormError(rest => ({\n        ...rest,\n        email: 'Email is required',\n      }));\n    }\n\n    if (!commentText) {\n      setFormError(rest => ({\n        ...rest,\n        text: 'Enter some text',\n      }));\n    }\n\n    if (selectedPost?.id && !isEmptyField) {\n      setIsFormLoading(true);\n\n      createComment({\n        postId: selectedPost?.id,\n        name: commentName.trim(),\n        email: commentEmail.trim(),\n        body: commentText.trim(),\n      })\n        .then(newComment => {\n          setPostsComments(currentComments => [...currentComments, newComment]);\n        })\n        .catch(() => {\n          setCommentErrorMessage('Can not to load comments');\n        })\n        .finally(() => {\n          setCommentText('');\n          setIsFormLoading(false);\n        });\n    }\n  };\n\n  const onClear = () => {\n    setFormError({\n      name: '',\n      email: '',\n      text: '',\n    });\n\n    setCommentEmail('');\n    setCommentName('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => addComment(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': formError.name })}\n            value={commentName}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.name}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': formError.email })}\n            value={commentEmail}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.email}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': formError.text })}\n            value={commentText}\n            onChange={handleTextChange}\n          />\n        </div>\n\n        {formError.text && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {formError.text}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isFormLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post | null,\n  isCommentButtonClicked: boolean,\n  setIsCommentButtonClicked: (value: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isCommentButtonClicked,\n  setIsCommentButtonClicked,\n}) => {\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [commentErrorMessage, setCommentErrorMessage] = useState('');\n  const [postsComments, setPostsComments] = useState<Comment[]>([]);\n\n  const commentButtonHandler = () => {\n    setIsCommentButtonClicked(true);\n  };\n\n  const getPostsComments = () => {\n    return client.get<Comment[]>(`/comments?postId=${selectedPost?.id}`)\n      .catch(() => {\n        setCommentErrorMessage('Something went wrong!');\n      });\n  };\n\n  useEffect(() => {\n    setIsCommentsLoading(true);\n    getPostsComments()\n      .then(comentsFromServer => {\n        if (comentsFromServer) {\n          setPostsComments(comentsFromServer);\n        }\n      })\n      .finally(() => setIsCommentsLoading(false));\n  }, [selectedPost]);\n\n  const removeComment = (id: number) => {\n    return client.delete(`/comments/${id}`);\n  };\n\n  const deleteCommentHandler = (id: number) => {\n    setIsCommentsLoading(true);\n    setPostsComments(prew => prew.filter(CurentComment => (\n      id !== CurentComment.id\n    )));\n\n    removeComment(id)\n      .catch(() => {\n        setCommentErrorMessage('delete error');\n      })\n      .finally(() => {\n        setIsCommentsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {commentErrorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {postsComments.length === 0\n            ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n            : <p className=\"title is-4\">Comments:</p>}\n\n          {!isCommentsLoading && (\n            postsComments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteCommentHandler(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            )))}\n\n          {!isCommentButtonClicked && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={commentButtonHandler}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentButtonClicked && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setPostsComments={setPostsComments}\n            setCommentErrorMessage={setCommentErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  setIsDropDownActive: (value: boolean) => void,\n  isDropDownActive: boolean,\n  setSelectedUser: (value: User) => void,\n  selectedUser: User | null,\n  setSelectedPost: (value: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setIsDropDownActive,\n  isDropDownActive,\n  setSelectedUser,\n  selectedUser,\n  setSelectedPost,\n}) => {\n  const dropDownHandler = () => {\n    if (isDropDownActive === false) {\n      setIsDropDownActive(true);\n    } else {\n      setIsDropDownActive(false);\n    }\n  };\n\n  const selectUserHandler = (user: User) => {\n    if (selectedUser !== user) {\n      setSelectedUser(user);\n      setIsDropDownActive(false);\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isDropDownActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={dropDownHandler}\n        >\n          {selectedUser === null\n            ? <span>Choose a user</span>\n            : <span>{selectedUser.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => selectUserHandler(user)}\n              key={user.id}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isDropDownActive, setIsDropDownActive] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [usersPosts, setUsersPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isCommentButtonClicked, setIsCommentButtonClicked] = useState(false);\n\n  const getAllUsers = () => {\n    return client.get<User[]>('/users')\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n      });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getAllUsers()\n      .then(usersFromServer => {\n        if (usersFromServer) {\n          setUsers(usersFromServer);\n        }\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const getUsersPosts = () => {\n    return client.get<Post[]>(`/posts?userId=${selectedUser?.id}`)\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n      });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUsersPosts()\n      .then(postsFromServer => {\n        if (postsFromServer) {\n          setUsersPosts(postsFromServer);\n        }\n      })\n      .finally(() => setIsLoading(false));\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setIsDropDownActive={setIsDropDownActive}\n                  isDropDownActive={isDropDownActive}\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {(usersPosts.length === 0 && selectedUser) && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(usersPosts.length > 0 && selectedUser) && (\n                  <PostsList\n                    usersPosts={usersPosts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setIsCommentButtonClicked={setIsCommentButtonClicked}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost !== null },\n            )}\n          >\n            {selectedPost !== null && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isCommentButtonClicked={isCommentButtonClicked}\n                  setIsCommentButtonClicked={setIsCommentButtonClicked}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}